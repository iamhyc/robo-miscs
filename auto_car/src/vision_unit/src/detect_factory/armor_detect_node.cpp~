#include "armor_detect_node.h"
#include "debug_utility.hpp"
#include "util.h"
#include "draw.h"
#include "vision_unit/armor_msg.h"
#include "labeler.h"
#include "video_recoder.h"
#include <memory>
#include <math.h>

#define _DEBUG_VISION
namespace autocar
{
namespace vision_mul
{
armor_detect_node::armor_detect_node(void)
{

    ros::NodeHandle n;
    sub_yaw = n.subscribe<serial_comm::car_speed>("car_info", 5, boost::bind(&armor_detect_node::pan_info_callback, this, _1));
    pub_armor_pos = n.advertise<vision_unit::armor_msg>("armor_info", 1000);
    pub_goal = n.advertise<move_base_msgs::MoveBaseGoal>("camera_goal", 10);
    n.param<bool>("/armor_detect/debug_on", debug_on, true);
    std::cout<<"Debug_on:"<<debug_on<<std::endl;

    //Set the goal value to geometry_msgs::PoseStamped.
    goal_pose.target_pose.header.stamp    = ros::Time::now();
    goal_pose.target_pose.header.frame_id = "base_link";
    goal_pose.target_pose.pose.position.x = 0;
    goal_pose.target_pose.pose.position.y = 0;
    goal_pose.target_pose.pose.position.z = 0;


    goal_pose.target_pose.pose.orientation.w = 0;
    goal_pose.target_pose.pose.orientation.x = 0;
    goal_pose.target_pose.pose.orientation.y = 0;

    //init pnp param
    obj_p.push_back(cv::Point3f(0.0,   0.0,  0.0));
    obj_p.push_back(cv::Point3f(125,   0.0,  0.0));
    obj_p.push_back(cv::Point3f(125,   60,   0.0));
    obj_p.push_back(cv::Point3f(0.0,   60,   0.0));

    camera_matrix = cv::Mat(3, 3, CV_64F, cam);
    dist_coeffs   = cv::Mat(5, 1, CV_64F, dist_c);

    rvec = cv::Mat::ones(3,1,CV_64F);
    tvec = cv::Mat::ones(3,1,CV_64F);
    forward_back = true;
    //cv::Mat(obj_p).convertTo(obj_points, CV_32F);
}

armor_detect_node::~armor_detect_node(void)
{
}

void armor_detect_node::running(void)
{
    cv::Mat image;
    //cv::VideoCapture capture_camera_forward("/data/dl_armor_detection/dataset/armor_0002.avi");
    cv::VideoCapture capture_camera_forward(0);
    if(!capture_camera_forward.isOpened())
    {
        std::cout<<"Cannot open the camera!"<<std::endl;
        return;
    }
    set_camera_exposure("/dev/video0", 70);
    //{
    //  while (true) {
    //    boost::this_thread::sleep_for(boost::chrono::seconds(10));
    //  }
    //}

    //cv::VideoCapture capture_camera_back("/home/dji/Videos/armor_20170405_170846.avi");
    std::shared_ptr<armor_detecter> armor_detector;
    std::shared_ptr<labeler> label;
    std::shared_ptr<video_recoder> recoder;

    int nframes = 0;
    bool detected = false;
    //filter
    int detected_count = 0;
    int undetected_count = 3;

    for (;;)
    {
        auto speed_test_start_begin_time = std::chrono::system_clock::now();
        //if(forward_back)
        capture_camera_forward >> image;
        if(image.empty())
        {
            std::cout<<"Image has no data!"<<std::endl;
            continue;
        }
        //else
        //capture_camera_back >> image;

        // Find the fianl armor.
        if (armor_detector == nullptr)
            armor_detector = std::shared_ptr<armor_detecter>(new armor_detecter(debug_on));
        if(forward_back && !image.empty())
        {
            detected = armor_detector->detect(image, true);
        }

        if(detected)
        {
            detected_count++;
            armor_ = armor_detector->get_armor();
            if(detected_count >= 1)
            {
                detected_armor = true;
                detected_count = 0;
            }
        }
        else
        {
            if(undetected_count != 0)
                undetected_count--;
            if(undetected_count == 0)
            {
                detected_armor = false;
                undetected_count = 25;
            }
        }

#ifdef _DEBUG_VISION
        int keycode = cv::waitKey(1);
        if ((keycode & 0xff) == 27) // ESC
            break;
#endif

        //forward_back = !forward_back;
        //ros
        //forward_back = get_camera_num();
        if(!forward_back)
        {
            if(detected_armor)
            {
                goal_pose.target_pose.pose.orientation.z = 1;
                //goal.request.target_pose = goal_pose;
                pub_goal.publish(goal_pose);
            }
        }
        else
        {
            if(detected_armor)
            {
                //set the image_points
                //        std::cout<<"point size: "<<armor_->points.size()<<std::endl;
                //        std::cout<<"point 1: "<<armor_->points[0]<<std::endl;
                //        std::cout<<"point 2: "<<armor_->points[1]<<std::endl;
                //        std::cout<<"point 3: "<<armor_->points[2]<<std::endl;
                //        std::cout<<"point 4: "<<armor_->points[3]<<std::endl;
                //set_image_points(armor_->points);

                cv::solvePnP(obj_p, armor_->points, camera_matrix, dist_coeffs, rvec, tvec);
                double enemy_dis = tvec.at<double>(2)/1000.0;//Z distance
                double enemy_ang = rvec.at<double>(1);//Rotate around y axis
                std::cout<<"Enemy distance:"<<enemy_dis<<std::endl;
                //std::cout<<"Enemy angle:"<<enemy_ang*180/3.14<<std::endl;
                if(enemy_dis < 4.5)
                {
                    armor_pos.detected = true;
                    armor_pos.x = armor_->armor.center.x - 320;
                    armor_pos.y = armor_->armor.center.y - 240;
                    armor_pos.d = enemy_dis*1000;
                }
                else
                    armor_pos.detected = false;
                //Publishing armor data tp serial_write
                pub_armor_pos.publish(armor_pos);


                //double goal_dis = enemy_dis - 2.0*sin(pan_yaw);
                //double goal_dis = enemy_dis - 2.5;
                goal_pose.target_pose.header.frame_id = "base_link";
                goal_pose.target_pose.header.stamp = ros::Time::now();
                goal_pose.target_pose.pose.position.x = enemy_dis;
                goal_pose.target_pose.pose.position.y = 0;
                goal_pose.target_pose.pose.position.z = 1;
                //tf::Quaternion q;
                //q.setRPY(0, 0, pan_yaw);
                goal_pose.target_pose.pose.orientation.x= 0;
                goal_pose.target_pose.pose.orientation.y= 0;
                goal_pose.target_pose.pose.orientation.z= 0;
                goal_pose.target_pose.pose.orientation.w= 1;
                pub_goal.publish(goal_pose);
            }
            else
            {
                armor_pos.detected = false;
                pub_armor_pos.publish(armor_pos);

                goal_pose.target_pose.pose.position.z = 0;
                pub_goal.publish(goal_pose);
            }
        }
    }
}

void armor_detect_node::pan_info_callback(const serial_comm::car_speed::ConstPtr &pan_data)
{
    //pan_yaw = pan_data->yaw;
}

bool armor_detect_node::if_detected_armor()
{
    return detected_armor;
}

bool armor_detect_node::get_camera_num()
{
    return forward_back;
}

armor_info* armor_detect_node::get_armor()
{
    return armor_;
}

void armor_detect_node::set_image_points(std::vector<cv::Point2f> armor_points)
{
    //  cv::Point2f vertices[4];
    //  rect.points(vertices);
    //  cv::Point2f lu, ld, ru, rd;
    //  std::sort(vertices, vertices + 4, [](const cv::Point2f & p1, const cv::Point2f & p2) { return p1.x < p2.x; });
    //  if (vertices[0].y < vertices[1].y){
    //    lu = vertices[0];
    //    ld = vertices[1];
    //  }
    //  else{
    //    lu = vertices[1];
    //    ld = vertices[0];
    //  }
    //  if (vertices[2].y < vertices[3].y)	{
    //    ru = vertices[2];
    //    rd = vertices[3];
    //  }
    //  else {
    //    ru = vertices[3];
    //    rd = vertices[2];
    //  }
    //  //img_p.push_back()
    //  img_p.clear();
    //  img_p.push_back(lu);
    //  img_p.push_back(ru);
    //  img_p.push_back(rd);
    //  img_p.push_back(ld);
    cv::Mat(armor_points).convertTo(img_points, CV_32F);
}
}
}

